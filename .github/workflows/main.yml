jobs:
  build-run-non-docker-tests:
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v3
    - continue-on-error: true
      name: Set up Java
      uses: actions/setup-java@v3
      with:
        cache: maven
        distribution: corretto
        java-version: ${{ matrix.jdk }}
    - continue-on-error: true
      name: Set maven opts
      run: set MAVEN_OPTS="-Xms6000m -Xmx8000m"
    - continue-on-error: true
      name: Run CI without docker tests
      run: ./mvnw install --fail-at-end
    strategy:
      matrix:
        jdk:
        - 11
        - 17
  check-secrets:
    outputs:
      have_secrets: ${{ steps.setvar.outputs.have_secrets }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      id: setvar
      run: "if [[ \"${{ secrets.SF_ACCOUNT }}\" != \"\" && \\\n      \"${{ secrets.SF_USER\
        \ }}\" != \"\" && \\\n      \"${{ secrets.SF_PASSWORD }}\" != \"\" ]]; \\\n\
        then\n  echo \"Secrets to use a container registry were configured in the\
        \ repo\"\n  echo \"have_secrets=true\" >> $GITHUB_OUTPUT\nelse\n  echo \"\
        Secrets to use a container registry were not configured in the repo\"\n  echo\
        \ \"have_secrets=false\" >> $GITHUB_OUTPUT\nfi\n"
  run-athena:
    if: needs.check-secrets.outputs.have_secrets == 'true'
    needs:
    - build-run-non-docker-tests
    - check-secrets
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v3
    - continue-on-error: true
      name: Set up Java
      uses: actions/setup-java@v3
      with:
        cache: maven
        distribution: corretto
        java-version: ${{ matrix.jdk }}
    - continue-on-error: true
      name: Set maven opts
      run: set MAVEN_OPTS="-Xms6000m -Xmx8000m"
    - continue-on-error: true
      env:
        ATHENA_BUCKET: ${{ secrets.ATHENA_BUCKET }}
        ATHENA_PASSWORD: ${{ secrets.ATHENA_PASSWORD }}
        ATHENA_USER: ${{ secrets.ATHENA_USER }}
      name: Run CI for Athena lightweight tests
      run: cd test/lightweight-tests && ../../mvnw install -Dgroups="athenalighttests"
        -DskipTests=false -Dathena.user=${ATHENA_USER} -Dathena.password=${ATHENA_PASSWORD}
        -Dathena.bucket=${ATHENA_BUCKET} --fail-at-end
    strategy:
      matrix:
        jdk:
        - 11
  run-db2:
    needs:
    - run-oracle
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v3
    - continue-on-error: true
      name: Set up Java
      uses: actions/setup-java@v3
      with:
        cache: maven
        distribution: corretto
        java-version: ${{ matrix.jdk }}
    - continue-on-error: true
      name: Set maven opts
      run: set MAVEN_OPTS="-Xms6000m -Xmx8000m"
    - continue-on-error: true
      name: Set up docker
      run: cd test/lightweight-tests/lightweight-db-test-images && docker-compose
        -f "docker-compose.lightweight.yml" up -d db2
    - continue-on-error: true
      name: Sleep for 240 seconds
      run: sleep 240s
      shell: bash
    - continue-on-error: true
      name: Run CI for DB2 docker tests
      run: cd test/lightweight-tests && ../../mvnw install -Dgroups="db2lighttests"
        -DskipTests=false --fail-at-end
    strategy:
      matrix:
        jdk:
        - 11
  run-dremio:
    needs: run-postgresql
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v3
    - continue-on-error: true
      name: Set up Java
      uses: actions/setup-java@v3
      with:
        cache: maven
        distribution: corretto
        java-version: ${{ matrix.jdk }}
    - continue-on-error: true
      name: Set maven opts
      run: set MAVEN_OPTS="-Xms6000m -Xmx8000m"
    - continue-on-error: true
      name: Set up docker
      run: cd test/lightweight-tests/lightweight-db-test-images && docker-compose
        -f "docker-compose.lightweight.yml" up -d pgsql dremio
    - continue-on-error: true
      name: Sleep for 20 seconds
      run: sleep 20s
      shell: bash
    - continue-on-error: true
      name: Run CI for Dremio docker tests
      run: cd test/lightweight-tests && ../../mvnw install -Dgroups="dremiolighttests"
        -DskipTests=false --fail-at-end
    strategy:
      matrix:
        jdk:
        - 11
  run-duckdb:
    needs: run-trino
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v3
    - continue-on-error: true
      name: Set up Java
      uses: actions/setup-java@v3
      with:
        cache: maven
        distribution: corretto
        java-version: ${{ matrix.jdk }}
    - continue-on-error: true
      name: Set maven opts
      run: set MAVEN_OPTS="-Xms6000m -Xmx8000m"
    - continue-on-error: true
      name: Set up docker
      run: cd test/lightweight-tests/lightweight-db-test-images
    - continue-on-error: true
      name: Sleep for 20 seconds
      run: sleep 20s
      shell: bash
    - continue-on-error: true
      name: Run CI for Presto Docker tests
      run: cd test/lightweight-tests && ../../mvnw install -Dgroups="duckdblighttests"
        -DskipTests=false --fail-at-end
    strategy:
      matrix:
        jdk:
        - 11
  run-mariadb:
    needs:
    - run-mysql-v8
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v3
    - continue-on-error: true
      name: Set up Java
      uses: actions/setup-java@v3
      with:
        cache: maven
        distribution: corretto
        java-version: ${{ matrix.jdk }}
    - continue-on-error: true
      name: Set maven opts
      run: set MAVEN_OPTS="-Xms6000m -Xmx8000m"
    - continue-on-error: true
      name: Set up docker
      run: cd test/lightweight-tests/lightweight-db-test-images && docker-compose
        -f "docker-compose.lightweight.yml" up -d mariadb
    - continue-on-error: true
      name: Run CI for MariaDB docker tests
      run: cd test/lightweight-tests && ../../mvnw install -Dgroups="mariadblighttests"
        -DskipTests=false --fail-at-end
    strategy:
      matrix:
        jdk:
        - 11
  run-mssql:
    needs: run-dremio
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v3
    - continue-on-error: true
      name: Set up Java
      uses: actions/setup-java@v3
      with:
        cache: maven
        distribution: corretto
        java-version: ${{ matrix.jdk }}
    - continue-on-error: true
      name: Set maven opts
      run: set MAVEN_OPTS="-Xms6000m -Xmx8000m"
    - continue-on-error: true
      name: Set up docker
      run: cd test/lightweight-tests/lightweight-db-test-images && docker-compose
        -f "docker-compose.lightweight.yml" up -d mssql
    - continue-on-error: true
      name: Run CI for SQLServer docker tests
      run: cd test/lightweight-tests && ../../mvnw install -Dgroups="mssqllighttests"
        -DskipTests=false --fail-at-end
    strategy:
      matrix:
        jdk:
        - 11
  run-mysql-v5:
    needs:
    - run-mssql
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v3
    - continue-on-error: true
      name: Set up Java
      uses: actions/setup-java@v3
      with:
        cache: maven
        distribution: corretto
        java-version: ${{ matrix.jdk }}
    - continue-on-error: true
      name: Set maven opts
      run: set MAVEN_OPTS="-Xms6000m -Xmx8000m"
    - continue-on-error: true
      name: Set up docker
      run: cd test/lightweight-tests/lightweight-db-test-images && docker-compose
        -f "docker-compose.lightweight.yml" up -d mysql-v5
    - continue-on-error: true
      name: Set Environment Variable for MySQL 5
      run: echo "MYSQL_VERSION=5" >> $GITHUB_ENV
    - continue-on-error: true
      env:
        MYSQL_VERSION: ${{ env.MYSQL_VERSION }}
      name: Run CI for MySQL v5.x docker tests
      run: cd test/lightweight-tests && ../../mvnw install -Dgroups="mysqllighttests"
        -DskipTests=false --fail-at-end
    strategy:
      matrix:
        jdk:
        - 11
  run-mysql-v8:
    needs:
    - run-mssql
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v3
    - continue-on-error: true
      name: Set up Java
      uses: actions/setup-java@v3
      with:
        cache: maven
        distribution: corretto
        java-version: ${{ matrix.jdk }}
    - continue-on-error: true
      name: Set maven opts
      run: set MAVEN_OPTS="-Xms6000m -Xmx8000m"
    - continue-on-error: true
      name: Set up docker
      run: cd test/lightweight-tests/lightweight-db-test-images && docker-compose
        -f "docker-compose.lightweight.yml" up -d mysql-v8
    - continue-on-error: true
      name: Run CI for MySQL docker tests
      run: cd test/lightweight-tests && ../../mvnw install -Dgroups="mysqllighttests"
        -DskipTests=false --fail-at-end
    strategy:
      matrix:
        jdk:
        - 11
  run-oracle:
    needs:
    - run-mariadb
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v3
    - continue-on-error: true
      name: Set up Java
      uses: actions/setup-java@v3
      with:
        cache: maven
        distribution: corretto
        java-version: ${{ matrix.jdk }}
    - continue-on-error: true
      name: Set maven opts
      run: set MAVEN_OPTS="-Xms6000m -Xmx8000m"
    - continue-on-error: true
      name: Set up docker
      run: cd test/lightweight-tests/lightweight-db-test-images && docker-compose
        -f "docker-compose.lightweight.yml" up -d oracle
    - continue-on-error: true
      name: Sleep for 60 seconds
      run: sleep 60s
      shell: bash
    - continue-on-error: true
      name: Run CI for Oracle docker tests
      run: cd test/lightweight-tests && ../../mvnw install -Dgroups="oraclelighttests"
        -DskipTests=false --fail-at-end
    strategy:
      matrix:
        jdk:
        - 11
  run-postgresql:
    needs: build-run-non-docker-tests
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v3
    - continue-on-error: true
      name: Set up Java
      uses: actions/setup-java@v3
      with:
        cache: maven
        distribution: corretto
        java-version: ${{ matrix.jdk }}
    - continue-on-error: true
      name: Set maven opts
      run: set MAVEN_OPTS="-Xms6000m -Xmx8000m"
    - continue-on-error: true
      name: Set up docker
      run: cd test/lightweight-tests/lightweight-db-test-images && docker-compose
        -f "docker-compose.lightweight.yml" up -d pgsql
    - continue-on-error: true
      name: Run CI for PostgreSQL docker tests
      run: cd test/lightweight-tests && ../../mvnw install -Dgroups="pgsqllighttests"
        -DskipTests=false --fail-at-end
    strategy:
      matrix:
        jdk:
        - 11
  run-presto:
    needs: run-db2
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v3
    - continue-on-error: true
      name: Set up Java
      uses: actions/setup-java@v3
      with:
        cache: maven
        distribution: corretto
        java-version: ${{ matrix.jdk }}
    - continue-on-error: true
      name: Set maven opts
      run: set MAVEN_OPTS="-Xms6000m -Xmx8000m"
    - continue-on-error: true
      name: Set up docker
      run: cd test/lightweight-tests/lightweight-db-test-images && docker-compose
        -f "docker-compose.lightweight.yml" up -d pgsql presto
    - continue-on-error: true
      name: Sleep for 20 seconds
      run: sleep 20s
      shell: bash
    - continue-on-error: true
      name: Run CI for Presto Docker tests
      run: cd test/lightweight-tests && ../../mvnw install -Dgroups="prestolighttests"
        -DskipTests=false --fail-at-end
    strategy:
      matrix:
        jdk:
        - 11
  run-snowflake:
    if: needs.check-secrets.outputs.have_secrets == 'true'
    needs:
    - build-run-non-docker-tests
    - check-secrets
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v3
    - continue-on-error: true
      name: Set up Java
      uses: actions/setup-java@v3
      with:
        cache: maven
        distribution: corretto
        java-version: ${{ matrix.jdk }}
    - continue-on-error: true
      name: Set maven opts
      run: set MAVEN_OPTS="-Xms6000m -Xmx8000m"
    - continue-on-error: true
      env:
        SF_ACCOUNT: ${{ secrets.SF_ACCOUNT }}
        SF_PASSWORD: ${{ secrets.SF_PASSWORD }}
        SF_USER: ${{ secrets.SF_USER }}
      name: Run CI for Snowflake lightweight tests
      run: cd test/lightweight-tests && ../../mvnw install -Dgroups="snowflakelighttests"
        -DskipTests=false -Dsnowflake.account=${SF_ACCOUNT} -Dsnowflake.user=${SF_USER}
        -Dsnowflake.password=${SF_PASSWORD} --fail-at-end
    strategy:
      matrix:
        jdk:
        - 11
  run-spark:
    needs: run-postgresql
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v3
    - continue-on-error: true
      name: Set up Java
      uses: actions/setup-java@v3
      with:
        cache: maven
        distribution: corretto
        java-version: ${{ matrix.jdk }}
    - continue-on-error: true
      name: Set maven opts
      run: set MAVEN_OPTS="-Xms6000m -Xmx8000m"
    - continue-on-error: true
      name: Set up docker
      run: cd test/lightweight-tests/lightweight-db-test-images && docker-compose
        -f "docker-compose.lightweight.yml" up -d spark
    - continue-on-error: true
      name: Sleep for 150 seconds
      run: sleep 150s
      shell: bash
    - continue-on-error: true
      name: Run CI for Spark SQL docker tests
      run: cd test/lightweight-tests && ../../mvnw install -Dgroups="sparksqllighttests"
        -DskipTests=false --fail-at-end
    strategy:
      matrix:
        jdk:
        - 11
  run-trino:
    needs: run-db2
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v3
    - continue-on-error: true
      name: Set up Java
      uses: actions/setup-java@v3
      with:
        cache: maven
        distribution: corretto
        java-version: ${{ matrix.jdk }}
    - continue-on-error: true
      name: Set maven opts
      run: set MAVEN_OPTS="-Xms6000m -Xmx8000m"
    - continue-on-error: true
      name: Set up docker
      run: cd test/lightweight-tests/lightweight-db-test-images && docker-compose
        -f "docker-compose.lightweight.yml" up -d pgsql trino
    - continue-on-error: true
      name: Sleep for 20 seconds
      run: sleep 20s
      shell: bash
    - continue-on-error: true
      name: Run CI for Trino Docker tests
      run: cd test/lightweight-tests && ../../mvnw install -Dgroups="trinolighttests"
        -DskipTests=false --fail-at-end
    strategy:
      matrix:
        jdk:
        - 11
name: CI
on:
  repository_dispatch:
    types: trigger-ga___main.yml
